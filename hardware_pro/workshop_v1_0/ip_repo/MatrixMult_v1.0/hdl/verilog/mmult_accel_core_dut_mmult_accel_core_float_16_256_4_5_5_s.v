// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.2
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mmult_accel_core_dut_mmult_accel_core_float_16_256_4_5_5_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_stream_data_V_dout,
        in_stream_data_V_empty_n,
        in_stream_data_V_read,
        in_stream_keep_V_dout,
        in_stream_keep_V_empty_n,
        in_stream_keep_V_read,
        in_stream_strb_V_dout,
        in_stream_strb_V_empty_n,
        in_stream_strb_V_read,
        in_stream_user_V_dout,
        in_stream_user_V_empty_n,
        in_stream_user_V_read,
        in_stream_last_V_dout,
        in_stream_last_V_empty_n,
        in_stream_last_V_read,
        in_stream_id_V_dout,
        in_stream_id_V_empty_n,
        in_stream_id_V_read,
        in_stream_dest_V_dout,
        in_stream_dest_V_empty_n,
        in_stream_dest_V_read,
        out_stream_data_V_din,
        out_stream_data_V_full_n,
        out_stream_data_V_write,
        out_stream_keep_V_din,
        out_stream_keep_V_full_n,
        out_stream_keep_V_write,
        out_stream_strb_V_din,
        out_stream_strb_V_full_n,
        out_stream_strb_V_write,
        out_stream_user_V_din,
        out_stream_user_V_full_n,
        out_stream_user_V_write,
        out_stream_last_V_din,
        out_stream_last_V_full_n,
        out_stream_last_V_write,
        out_stream_id_V_din,
        out_stream_id_V_full_n,
        out_stream_id_V_write,
        out_stream_dest_V_din,
        out_stream_dest_V_full_n,
        out_stream_dest_V_write
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 3'b000;
parameter    ap_ST_pp0_stg0_fsm_1 = 3'b1;
parameter    ap_ST_pp1_stg0_fsm_2 = 3'b10;
parameter    ap_ST_st6_fsm_3 = 3'b11;
parameter    ap_ST_st7_fsm_4 = 3'b100;
parameter    ap_ST_pp2_stg0_fsm_5 = 3'b101;
parameter    ap_ST_st10_fsm_6 = 3'b110;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv9_0 = 9'b000000000;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv4_F = 4'b1111;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv4_6 = 4'b110;
parameter    ap_const_lv4_5 = 4'b101;
parameter    ap_const_lv4_4 = 4'b100;
parameter    ap_const_lv4_3 = 4'b11;
parameter    ap_const_lv4_2 = 4'b10;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv9_100 = 9'b100000000;
parameter    ap_const_lv9_1 = 9'b1;
parameter    ap_const_lv5_10 = 5'b10000;
parameter    ap_const_lv5_1 = 5'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv5_4 = 5'b100;
parameter    ap_const_lv8_FF = 8'b11111111;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] in_stream_data_V_dout;
input   in_stream_data_V_empty_n;
output   in_stream_data_V_read;
input  [3:0] in_stream_keep_V_dout;
input   in_stream_keep_V_empty_n;
output   in_stream_keep_V_read;
input  [3:0] in_stream_strb_V_dout;
input   in_stream_strb_V_empty_n;
output   in_stream_strb_V_read;
input  [3:0] in_stream_user_V_dout;
input   in_stream_user_V_empty_n;
output   in_stream_user_V_read;
input  [0:0] in_stream_last_V_dout;
input   in_stream_last_V_empty_n;
output   in_stream_last_V_read;
input  [4:0] in_stream_id_V_dout;
input   in_stream_id_V_empty_n;
output   in_stream_id_V_read;
input  [4:0] in_stream_dest_V_dout;
input   in_stream_dest_V_empty_n;
output   in_stream_dest_V_read;
output  [31:0] out_stream_data_V_din;
input   out_stream_data_V_full_n;
output   out_stream_data_V_write;
output  [3:0] out_stream_keep_V_din;
input   out_stream_keep_V_full_n;
output   out_stream_keep_V_write;
output  [3:0] out_stream_strb_V_din;
input   out_stream_strb_V_full_n;
output   out_stream_strb_V_write;
output  [3:0] out_stream_user_V_din;
input   out_stream_user_V_full_n;
output   out_stream_user_V_write;
output  [0:0] out_stream_last_V_din;
input   out_stream_last_V_full_n;
output   out_stream_last_V_write;
output  [4:0] out_stream_id_V_din;
input   out_stream_id_V_full_n;
output   out_stream_id_V_write;
output  [4:0] out_stream_dest_V_din;
input   out_stream_dest_V_full_n;
output   out_stream_dest_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_stream_data_V_read;
reg in_stream_keep_V_read;
reg in_stream_strb_V_read;
reg in_stream_user_V_read;
reg in_stream_last_V_read;
reg in_stream_id_V_read;
reg in_stream_dest_V_read;
reg out_stream_data_V_write;
reg out_stream_keep_V_write;
reg out_stream_strb_V_write;
reg out_stream_user_V_write;
reg out_stream_last_V_write;
reg out_stream_id_V_write;
reg out_stream_dest_V_write;
reg   [2:0] ap_CS_fsm = 3'b000;
reg   [8:0] indvar_flatten_reg_435;
reg   [4:0] i_reg_446;
reg   [4:0] j_reg_457;
reg   [8:0] indvar_flatten6_reg_468;
reg   [4:0] i1_reg_479;
reg   [4:0] j2_reg_490;
reg   [8:0] indvar_flatten1_reg_501;
reg   [4:0] i4_reg_512;
reg   [4:0] j5_reg_523;
wire   [0:0] exitcond_flatten_fu_597_p2;
reg   [0:0] exitcond_flatten_reg_873;
reg    ap_reg_ppiten_pp0_it0 = 1'b0;
wire    grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_data_V_blk_n;
wire    grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_keep_V_blk_n;
wire    grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_strb_V_blk_n;
wire    grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_user_V_blk_n;
wire    grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_last_V_blk_n;
wire    grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_id_V_blk_n;
wire    grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_dest_V_blk_n;
reg    ap_sig_bdd_126;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
wire   [8:0] indvar_flatten_next_fu_603_p2;
wire   [4:0] i_mid2_fu_629_p3;
reg   [4:0] i_mid2_reg_882;
reg   [3:0] arrayNo_cast_reg_888;
wire   [0:0] tmp_3_fu_647_p1;
reg   [0:0] tmp_3_reg_892;
wire   [4:0] j_1_fu_651_p2;
wire   [0:0] exitcond_flatten8_fu_675_p2;
reg   [0:0] exitcond_flatten8_reg_902;
reg    ap_reg_ppiten_pp1_it0 = 1'b0;
reg    ap_sig_bdd_152;
reg    ap_reg_ppiten_pp1_it1 = 1'b0;
wire   [8:0] indvar_flatten_next7_fu_681_p2;
wire   [4:0] i1_mid2_fu_707_p3;
reg   [4:0] i1_mid2_reg_911;
reg   [3:0] arrayNo1_cast_reg_916;
wire   [5:0] p_addr3_fu_739_p2;
reg   [5:0] p_addr3_reg_920;
wire   [4:0] j_2_fu_745_p2;
wire   [0:0] exitcond_flatten1_fu_762_p2;
reg   [0:0] exitcond_flatten1_reg_930;
reg    ap_reg_ppiten_pp2_it0 = 1'b0;
reg    ap_sig_bdd_197;
reg    ap_reg_ppiten_pp2_it1 = 1'b0;
wire   [8:0] indvar_flatten_next1_fu_768_p2;
wire   [4:0] i4_mid2_fu_794_p3;
reg   [4:0] i4_mid2_reg_939;
wire   [0:0] tmp_1_fu_851_p2;
reg   [0:0] tmp_1_reg_949;
wire   [4:0] j_3_fu_857_p2;
wire    grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_ap_done;
reg   [4:0] a_0_1_address0;
reg    a_0_1_ce0;
reg    a_0_1_we0;
wire   [31:0] a_0_1_d0;
wire   [31:0] a_0_1_q0;
wire   [4:0] a_0_1_address1;
reg    a_0_1_ce1;
wire   [31:0] a_0_1_q1;
reg   [4:0] a_1_1_address0;
reg    a_1_1_ce0;
reg    a_1_1_we0;
wire   [31:0] a_1_1_d0;
wire   [31:0] a_1_1_q0;
wire   [4:0] a_1_1_address1;
reg    a_1_1_ce1;
wire   [31:0] a_1_1_q1;
reg   [4:0] a_2_1_address0;
reg    a_2_1_ce0;
reg    a_2_1_we0;
wire   [31:0] a_2_1_d0;
wire   [31:0] a_2_1_q0;
wire   [4:0] a_2_1_address1;
reg    a_2_1_ce1;
wire   [31:0] a_2_1_q1;
reg   [4:0] a_3_1_address0;
reg    a_3_1_ce0;
reg    a_3_1_we0;
wire   [31:0] a_3_1_d0;
wire   [31:0] a_3_1_q0;
wire   [4:0] a_3_1_address1;
reg    a_3_1_ce1;
wire   [31:0] a_3_1_q1;
reg   [4:0] a_4_1_address0;
reg    a_4_1_ce0;
reg    a_4_1_we0;
wire   [31:0] a_4_1_d0;
wire   [31:0] a_4_1_q0;
wire   [4:0] a_4_1_address1;
reg    a_4_1_ce1;
wire   [31:0] a_4_1_q1;
reg   [4:0] a_5_1_address0;
reg    a_5_1_ce0;
reg    a_5_1_we0;
wire   [31:0] a_5_1_d0;
wire   [31:0] a_5_1_q0;
wire   [4:0] a_5_1_address1;
reg    a_5_1_ce1;
wire   [31:0] a_5_1_q1;
reg   [4:0] a_6_1_address0;
reg    a_6_1_ce0;
reg    a_6_1_we0;
wire   [31:0] a_6_1_d0;
wire   [31:0] a_6_1_q0;
wire   [4:0] a_6_1_address1;
reg    a_6_1_ce1;
wire   [31:0] a_6_1_q1;
reg   [4:0] a_7_1_address0;
reg    a_7_1_ce0;
reg    a_7_1_we0;
wire   [31:0] a_7_1_d0;
wire   [31:0] a_7_1_q0;
wire   [4:0] a_7_1_address1;
reg    a_7_1_ce1;
wire   [31:0] a_7_1_q1;
reg   [4:0] b_0_1_address0;
reg    b_0_1_ce0;
reg    b_0_1_we0;
wire   [31:0] b_0_1_d0;
wire   [31:0] b_0_1_q0;
wire   [4:0] b_0_1_address1;
reg    b_0_1_ce1;
wire   [31:0] b_0_1_q1;
reg   [4:0] b_1_1_address0;
reg    b_1_1_ce0;
reg    b_1_1_we0;
wire   [31:0] b_1_1_d0;
wire   [31:0] b_1_1_q0;
wire   [4:0] b_1_1_address1;
reg    b_1_1_ce1;
wire   [31:0] b_1_1_q1;
reg   [4:0] b_2_1_address0;
reg    b_2_1_ce0;
reg    b_2_1_we0;
wire   [31:0] b_2_1_d0;
wire   [31:0] b_2_1_q0;
wire   [4:0] b_2_1_address1;
reg    b_2_1_ce1;
wire   [31:0] b_2_1_q1;
reg   [4:0] b_3_1_address0;
reg    b_3_1_ce0;
reg    b_3_1_we0;
wire   [31:0] b_3_1_d0;
wire   [31:0] b_3_1_q0;
wire   [4:0] b_3_1_address1;
reg    b_3_1_ce1;
wire   [31:0] b_3_1_q1;
reg   [4:0] b_4_1_address0;
reg    b_4_1_ce0;
reg    b_4_1_we0;
wire   [31:0] b_4_1_d0;
wire   [31:0] b_4_1_q0;
wire   [4:0] b_4_1_address1;
reg    b_4_1_ce1;
wire   [31:0] b_4_1_q1;
reg   [4:0] b_5_1_address0;
reg    b_5_1_ce0;
reg    b_5_1_we0;
wire   [31:0] b_5_1_d0;
wire   [31:0] b_5_1_q0;
wire   [4:0] b_5_1_address1;
reg    b_5_1_ce1;
wire   [31:0] b_5_1_q1;
reg   [4:0] b_6_1_address0;
reg    b_6_1_ce0;
reg    b_6_1_we0;
wire   [31:0] b_6_1_d0;
wire   [31:0] b_6_1_q0;
wire   [4:0] b_6_1_address1;
reg    b_6_1_ce1;
wire   [31:0] b_6_1_q1;
reg   [4:0] b_7_1_address0;
reg    b_7_1_ce0;
reg    b_7_1_we0;
wire   [31:0] b_7_1_d0;
wire   [31:0] b_7_1_q0;
wire   [4:0] b_7_1_address1;
reg    b_7_1_ce1;
wire   [31:0] b_7_1_q1;
reg   [7:0] out_address0;
reg    out_ce0;
reg    out_we0;
wire   [31:0] out_d0;
wire   [31:0] out_q0;
wire    grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_ap_start;
wire    grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_ap_idle;
wire    grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_ap_ready;
wire   [4:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_0_address0;
wire    grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_0_ce0;
wire   [31:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_0_q0;
wire   [4:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_0_address1;
wire    grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_0_ce1;
wire   [31:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_0_q1;
wire   [4:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_1_address0;
wire    grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_1_ce0;
wire   [31:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_1_q0;
wire   [4:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_1_address1;
wire    grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_1_ce1;
wire   [31:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_1_q1;
wire   [4:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_2_address0;
wire    grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_2_ce0;
wire   [31:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_2_q0;
wire   [4:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_2_address1;
wire    grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_2_ce1;
wire   [31:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_2_q1;
wire   [4:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_3_address0;
wire    grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_3_ce0;
wire   [31:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_3_q0;
wire   [4:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_3_address1;
wire    grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_3_ce1;
wire   [31:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_3_q1;
wire   [4:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_4_address0;
wire    grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_4_ce0;
wire   [31:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_4_q0;
wire   [4:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_4_address1;
wire    grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_4_ce1;
wire   [31:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_4_q1;
wire   [4:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_5_address0;
wire    grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_5_ce0;
wire   [31:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_5_q0;
wire   [4:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_5_address1;
wire    grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_5_ce1;
wire   [31:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_5_q1;
wire   [4:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_6_address0;
wire    grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_6_ce0;
wire   [31:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_6_q0;
wire   [4:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_6_address1;
wire    grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_6_ce1;
wire   [31:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_6_q1;
wire   [4:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_7_address0;
wire    grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_7_ce0;
wire   [31:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_7_q0;
wire   [4:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_7_address1;
wire    grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_7_ce1;
wire   [31:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_7_q1;
wire   [4:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_0_address0;
wire    grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_0_ce0;
wire   [31:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_0_q0;
wire   [4:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_0_address1;
wire    grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_0_ce1;
wire   [31:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_0_q1;
wire   [4:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_1_address0;
wire    grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_1_ce0;
wire   [31:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_1_q0;
wire   [4:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_1_address1;
wire    grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_1_ce1;
wire   [31:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_1_q1;
wire   [4:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_2_address0;
wire    grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_2_ce0;
wire   [31:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_2_q0;
wire   [4:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_2_address1;
wire    grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_2_ce1;
wire   [31:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_2_q1;
wire   [4:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_3_address0;
wire    grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_3_ce0;
wire   [31:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_3_q0;
wire   [4:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_3_address1;
wire    grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_3_ce1;
wire   [31:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_3_q1;
wire   [4:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_4_address0;
wire    grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_4_ce0;
wire   [31:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_4_q0;
wire   [4:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_4_address1;
wire    grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_4_ce1;
wire   [31:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_4_q1;
wire   [4:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_5_address0;
wire    grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_5_ce0;
wire   [31:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_5_q0;
wire   [4:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_5_address1;
wire    grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_5_ce1;
wire   [31:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_5_q1;
wire   [4:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_6_address0;
wire    grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_6_ce0;
wire   [31:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_6_q0;
wire   [4:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_6_address1;
wire    grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_6_ce1;
wire   [31:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_6_q1;
wire   [4:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_7_address0;
wire    grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_7_ce0;
wire   [31:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_7_q0;
wire   [4:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_7_address1;
wire    grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_7_ce1;
wire   [31:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_7_q1;
wire   [7:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_out_r_address0;
wire    grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_out_r_ce0;
wire    grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_out_r_we0;
wire   [31:0] grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_out_r_d0;
wire    grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_ap_start;
wire    grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_ap_done;
wire    grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_ap_idle;
wire    grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_ap_ready;
wire   [31:0] grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_data_V_dout;
wire    grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_data_V_empty_n;
wire    grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_data_V_read;
wire   [3:0] grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_keep_V_dout;
wire    grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_keep_V_empty_n;
wire    grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_keep_V_read;
wire   [3:0] grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_strb_V_dout;
wire    grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_strb_V_empty_n;
wire    grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_strb_V_read;
wire   [3:0] grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_user_V_dout;
wire    grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_user_V_empty_n;
wire    grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_user_V_read;
wire   [0:0] grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_last_V_dout;
wire    grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_last_V_empty_n;
wire    grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_last_V_read;
wire   [4:0] grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_id_V_dout;
wire    grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_id_V_empty_n;
wire    grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_id_V_read;
wire   [4:0] grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_dest_V_dout;
wire    grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_dest_V_empty_n;
wire    grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_dest_V_read;
wire   [31:0] grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_ap_return;
reg    grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_ap_ce;
wire   [31:0] call_ret_mmult_accel_core_push_stream_float_4_5_5_s_fu_590_v_read;
wire   [0:0] call_ret_mmult_accel_core_push_stream_float_4_5_5_s_fu_590_last;
wire   [31:0] call_ret_mmult_accel_core_push_stream_float_4_5_5_s_fu_590_ap_return_0;
wire   [0:0] call_ret_mmult_accel_core_push_stream_float_4_5_5_s_fu_590_ap_return_1;
reg   [4:0] i_phi_fu_450_p4;
reg   [4:0] i1_phi_fu_483_p4;
reg   [4:0] i4_phi_fu_516_p4;
reg    grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_ap_start_ap_start_reg = 1'b0;
reg    grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_ap_start_ap_start_reg = 1'b0;
wire   [63:0] tmp_5_fu_663_p1;
wire   [63:0] tmp_10_fu_751_p1;
wire   [63:0] tmp_13_fu_846_p1;
wire   [0:0] exitcond_fu_609_p2;
wire   [4:0] i_s_fu_623_p2;
wire   [4:0] j_mid2_fu_615_p3;
wire   [5:0] tmp_fu_657_p3;
wire   [0:0] exitcond1_fu_687_p2;
wire   [4:0] i_1_fu_701_p2;
wire   [4:0] j2_mid2_fu_693_p3;
wire   [4:0] tmp_9_fu_729_p2;
wire   [5:0] p_addr_cast_fu_735_p1;
wire   [5:0] tmp_3_trn_cast_fu_725_p1;
wire   [0:0] exitcond2_fu_774_p2;
wire   [4:0] i_2_fu_788_p2;
wire   [3:0] tmp_11_fu_802_p1;
wire   [4:0] j5_mid2_fu_780_p3;
wire   [7:0] j5_cast2_fu_814_p1;
wire   [7:0] tmp_s_fu_806_p3;
wire   [8:0] tmp_12_fu_828_p3;
wire   [9:0] p_addr4_cast_fu_836_p1;
wire   [9:0] tmp_9_trn_cast_fu_824_p1;
wire   [9:0] p_addr5_fu_840_p2;
wire   [7:0] k_fu_818_p2;
reg   [2:0] ap_NS_fsm;


mmult_accel_core_dut_mmult_accel_core_float_16_256_4_5_5_s_a_0_1 #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
a_0_1_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( a_0_1_address0 ),
    .ce0( a_0_1_ce0 ),
    .we0( a_0_1_we0 ),
    .d0( a_0_1_d0 ),
    .q0( a_0_1_q0 ),
    .address1( a_0_1_address1 ),
    .ce1( a_0_1_ce1 ),
    .q1( a_0_1_q1 )
);

mmult_accel_core_dut_mmult_accel_core_float_16_256_4_5_5_s_a_0_1 #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
a_1_1_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( a_1_1_address0 ),
    .ce0( a_1_1_ce0 ),
    .we0( a_1_1_we0 ),
    .d0( a_1_1_d0 ),
    .q0( a_1_1_q0 ),
    .address1( a_1_1_address1 ),
    .ce1( a_1_1_ce1 ),
    .q1( a_1_1_q1 )
);

mmult_accel_core_dut_mmult_accel_core_float_16_256_4_5_5_s_a_0_1 #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
a_2_1_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( a_2_1_address0 ),
    .ce0( a_2_1_ce0 ),
    .we0( a_2_1_we0 ),
    .d0( a_2_1_d0 ),
    .q0( a_2_1_q0 ),
    .address1( a_2_1_address1 ),
    .ce1( a_2_1_ce1 ),
    .q1( a_2_1_q1 )
);

mmult_accel_core_dut_mmult_accel_core_float_16_256_4_5_5_s_a_0_1 #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
a_3_1_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( a_3_1_address0 ),
    .ce0( a_3_1_ce0 ),
    .we0( a_3_1_we0 ),
    .d0( a_3_1_d0 ),
    .q0( a_3_1_q0 ),
    .address1( a_3_1_address1 ),
    .ce1( a_3_1_ce1 ),
    .q1( a_3_1_q1 )
);

mmult_accel_core_dut_mmult_accel_core_float_16_256_4_5_5_s_a_0_1 #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
a_4_1_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( a_4_1_address0 ),
    .ce0( a_4_1_ce0 ),
    .we0( a_4_1_we0 ),
    .d0( a_4_1_d0 ),
    .q0( a_4_1_q0 ),
    .address1( a_4_1_address1 ),
    .ce1( a_4_1_ce1 ),
    .q1( a_4_1_q1 )
);

mmult_accel_core_dut_mmult_accel_core_float_16_256_4_5_5_s_a_0_1 #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
a_5_1_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( a_5_1_address0 ),
    .ce0( a_5_1_ce0 ),
    .we0( a_5_1_we0 ),
    .d0( a_5_1_d0 ),
    .q0( a_5_1_q0 ),
    .address1( a_5_1_address1 ),
    .ce1( a_5_1_ce1 ),
    .q1( a_5_1_q1 )
);

mmult_accel_core_dut_mmult_accel_core_float_16_256_4_5_5_s_a_0_1 #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
a_6_1_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( a_6_1_address0 ),
    .ce0( a_6_1_ce0 ),
    .we0( a_6_1_we0 ),
    .d0( a_6_1_d0 ),
    .q0( a_6_1_q0 ),
    .address1( a_6_1_address1 ),
    .ce1( a_6_1_ce1 ),
    .q1( a_6_1_q1 )
);

mmult_accel_core_dut_mmult_accel_core_float_16_256_4_5_5_s_a_0_1 #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
a_7_1_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( a_7_1_address0 ),
    .ce0( a_7_1_ce0 ),
    .we0( a_7_1_we0 ),
    .d0( a_7_1_d0 ),
    .q0( a_7_1_q0 ),
    .address1( a_7_1_address1 ),
    .ce1( a_7_1_ce1 ),
    .q1( a_7_1_q1 )
);

mmult_accel_core_dut_mmult_accel_core_float_16_256_4_5_5_s_a_0_1 #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
b_0_1_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( b_0_1_address0 ),
    .ce0( b_0_1_ce0 ),
    .we0( b_0_1_we0 ),
    .d0( b_0_1_d0 ),
    .q0( b_0_1_q0 ),
    .address1( b_0_1_address1 ),
    .ce1( b_0_1_ce1 ),
    .q1( b_0_1_q1 )
);

mmult_accel_core_dut_mmult_accel_core_float_16_256_4_5_5_s_a_0_1 #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
b_1_1_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( b_1_1_address0 ),
    .ce0( b_1_1_ce0 ),
    .we0( b_1_1_we0 ),
    .d0( b_1_1_d0 ),
    .q0( b_1_1_q0 ),
    .address1( b_1_1_address1 ),
    .ce1( b_1_1_ce1 ),
    .q1( b_1_1_q1 )
);

mmult_accel_core_dut_mmult_accel_core_float_16_256_4_5_5_s_a_0_1 #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
b_2_1_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( b_2_1_address0 ),
    .ce0( b_2_1_ce0 ),
    .we0( b_2_1_we0 ),
    .d0( b_2_1_d0 ),
    .q0( b_2_1_q0 ),
    .address1( b_2_1_address1 ),
    .ce1( b_2_1_ce1 ),
    .q1( b_2_1_q1 )
);

mmult_accel_core_dut_mmult_accel_core_float_16_256_4_5_5_s_a_0_1 #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
b_3_1_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( b_3_1_address0 ),
    .ce0( b_3_1_ce0 ),
    .we0( b_3_1_we0 ),
    .d0( b_3_1_d0 ),
    .q0( b_3_1_q0 ),
    .address1( b_3_1_address1 ),
    .ce1( b_3_1_ce1 ),
    .q1( b_3_1_q1 )
);

mmult_accel_core_dut_mmult_accel_core_float_16_256_4_5_5_s_a_0_1 #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
b_4_1_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( b_4_1_address0 ),
    .ce0( b_4_1_ce0 ),
    .we0( b_4_1_we0 ),
    .d0( b_4_1_d0 ),
    .q0( b_4_1_q0 ),
    .address1( b_4_1_address1 ),
    .ce1( b_4_1_ce1 ),
    .q1( b_4_1_q1 )
);

mmult_accel_core_dut_mmult_accel_core_float_16_256_4_5_5_s_a_0_1 #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
b_5_1_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( b_5_1_address0 ),
    .ce0( b_5_1_ce0 ),
    .we0( b_5_1_we0 ),
    .d0( b_5_1_d0 ),
    .q0( b_5_1_q0 ),
    .address1( b_5_1_address1 ),
    .ce1( b_5_1_ce1 ),
    .q1( b_5_1_q1 )
);

mmult_accel_core_dut_mmult_accel_core_float_16_256_4_5_5_s_a_0_1 #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
b_6_1_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( b_6_1_address0 ),
    .ce0( b_6_1_ce0 ),
    .we0( b_6_1_we0 ),
    .d0( b_6_1_d0 ),
    .q0( b_6_1_q0 ),
    .address1( b_6_1_address1 ),
    .ce1( b_6_1_ce1 ),
    .q1( b_6_1_q1 )
);

mmult_accel_core_dut_mmult_accel_core_float_16_256_4_5_5_s_a_0_1 #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
b_7_1_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( b_7_1_address0 ),
    .ce0( b_7_1_ce0 ),
    .we0( b_7_1_we0 ),
    .d0( b_7_1_d0 ),
    .q0( b_7_1_q0 ),
    .address1( b_7_1_address1 ),
    .ce1( b_7_1_ce1 ),
    .q1( b_7_1_q1 )
);

mmult_accel_core_dut_mmult_accel_core_float_16_256_4_5_5_s_out #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
out_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( out_address0 ),
    .ce0( out_ce0 ),
    .we0( out_we0 ),
    .d0( out_d0 ),
    .q0( out_q0 )
);

mmult_accel_core_matrix_multiply_hw_float_16_s grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_ap_start ),
    .ap_done( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_ap_done ),
    .ap_idle( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_ap_idle ),
    .ap_ready( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_ap_ready ),
    .a_0_address0( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_0_address0 ),
    .a_0_ce0( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_0_ce0 ),
    .a_0_q0( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_0_q0 ),
    .a_0_address1( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_0_address1 ),
    .a_0_ce1( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_0_ce1 ),
    .a_0_q1( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_0_q1 ),
    .a_1_address0( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_1_address0 ),
    .a_1_ce0( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_1_ce0 ),
    .a_1_q0( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_1_q0 ),
    .a_1_address1( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_1_address1 ),
    .a_1_ce1( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_1_ce1 ),
    .a_1_q1( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_1_q1 ),
    .a_2_address0( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_2_address0 ),
    .a_2_ce0( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_2_ce0 ),
    .a_2_q0( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_2_q0 ),
    .a_2_address1( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_2_address1 ),
    .a_2_ce1( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_2_ce1 ),
    .a_2_q1( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_2_q1 ),
    .a_3_address0( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_3_address0 ),
    .a_3_ce0( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_3_ce0 ),
    .a_3_q0( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_3_q0 ),
    .a_3_address1( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_3_address1 ),
    .a_3_ce1( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_3_ce1 ),
    .a_3_q1( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_3_q1 ),
    .a_4_address0( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_4_address0 ),
    .a_4_ce0( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_4_ce0 ),
    .a_4_q0( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_4_q0 ),
    .a_4_address1( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_4_address1 ),
    .a_4_ce1( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_4_ce1 ),
    .a_4_q1( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_4_q1 ),
    .a_5_address0( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_5_address0 ),
    .a_5_ce0( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_5_ce0 ),
    .a_5_q0( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_5_q0 ),
    .a_5_address1( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_5_address1 ),
    .a_5_ce1( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_5_ce1 ),
    .a_5_q1( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_5_q1 ),
    .a_6_address0( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_6_address0 ),
    .a_6_ce0( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_6_ce0 ),
    .a_6_q0( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_6_q0 ),
    .a_6_address1( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_6_address1 ),
    .a_6_ce1( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_6_ce1 ),
    .a_6_q1( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_6_q1 ),
    .a_7_address0( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_7_address0 ),
    .a_7_ce0( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_7_ce0 ),
    .a_7_q0( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_7_q0 ),
    .a_7_address1( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_7_address1 ),
    .a_7_ce1( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_7_ce1 ),
    .a_7_q1( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_7_q1 ),
    .b_0_address0( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_0_address0 ),
    .b_0_ce0( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_0_ce0 ),
    .b_0_q0( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_0_q0 ),
    .b_0_address1( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_0_address1 ),
    .b_0_ce1( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_0_ce1 ),
    .b_0_q1( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_0_q1 ),
    .b_1_address0( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_1_address0 ),
    .b_1_ce0( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_1_ce0 ),
    .b_1_q0( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_1_q0 ),
    .b_1_address1( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_1_address1 ),
    .b_1_ce1( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_1_ce1 ),
    .b_1_q1( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_1_q1 ),
    .b_2_address0( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_2_address0 ),
    .b_2_ce0( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_2_ce0 ),
    .b_2_q0( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_2_q0 ),
    .b_2_address1( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_2_address1 ),
    .b_2_ce1( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_2_ce1 ),
    .b_2_q1( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_2_q1 ),
    .b_3_address0( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_3_address0 ),
    .b_3_ce0( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_3_ce0 ),
    .b_3_q0( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_3_q0 ),
    .b_3_address1( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_3_address1 ),
    .b_3_ce1( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_3_ce1 ),
    .b_3_q1( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_3_q1 ),
    .b_4_address0( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_4_address0 ),
    .b_4_ce0( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_4_ce0 ),
    .b_4_q0( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_4_q0 ),
    .b_4_address1( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_4_address1 ),
    .b_4_ce1( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_4_ce1 ),
    .b_4_q1( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_4_q1 ),
    .b_5_address0( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_5_address0 ),
    .b_5_ce0( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_5_ce0 ),
    .b_5_q0( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_5_q0 ),
    .b_5_address1( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_5_address1 ),
    .b_5_ce1( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_5_ce1 ),
    .b_5_q1( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_5_q1 ),
    .b_6_address0( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_6_address0 ),
    .b_6_ce0( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_6_ce0 ),
    .b_6_q0( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_6_q0 ),
    .b_6_address1( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_6_address1 ),
    .b_6_ce1( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_6_ce1 ),
    .b_6_q1( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_6_q1 ),
    .b_7_address0( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_7_address0 ),
    .b_7_ce0( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_7_ce0 ),
    .b_7_q0( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_7_q0 ),
    .b_7_address1( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_7_address1 ),
    .b_7_ce1( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_7_ce1 ),
    .b_7_q1( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_7_q1 ),
    .out_r_address0( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_out_r_address0 ),
    .out_r_ce0( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_out_r_ce0 ),
    .out_r_we0( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_out_r_we0 ),
    .out_r_d0( grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_out_r_d0 )
);

mmult_accel_core_pop_stream_float_4_5_5_s grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_ap_start ),
    .ap_done( grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_ap_done ),
    .ap_idle( grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_ap_idle ),
    .ap_ready( grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_ap_ready ),
    .e_data_V_dout( grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_data_V_dout ),
    .e_data_V_empty_n( grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_data_V_empty_n ),
    .e_data_V_read( grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_data_V_read ),
    .e_data_V_blk_n( grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_data_V_blk_n ),
    .e_keep_V_dout( grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_keep_V_dout ),
    .e_keep_V_empty_n( grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_keep_V_empty_n ),
    .e_keep_V_read( grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_keep_V_read ),
    .e_keep_V_blk_n( grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_keep_V_blk_n ),
    .e_strb_V_dout( grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_strb_V_dout ),
    .e_strb_V_empty_n( grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_strb_V_empty_n ),
    .e_strb_V_read( grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_strb_V_read ),
    .e_strb_V_blk_n( grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_strb_V_blk_n ),
    .e_user_V_dout( grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_user_V_dout ),
    .e_user_V_empty_n( grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_user_V_empty_n ),
    .e_user_V_read( grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_user_V_read ),
    .e_user_V_blk_n( grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_user_V_blk_n ),
    .e_last_V_dout( grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_last_V_dout ),
    .e_last_V_empty_n( grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_last_V_empty_n ),
    .e_last_V_read( grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_last_V_read ),
    .e_last_V_blk_n( grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_last_V_blk_n ),
    .e_id_V_dout( grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_id_V_dout ),
    .e_id_V_empty_n( grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_id_V_empty_n ),
    .e_id_V_read( grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_id_V_read ),
    .e_id_V_blk_n( grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_id_V_blk_n ),
    .e_dest_V_dout( grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_dest_V_dout ),
    .e_dest_V_empty_n( grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_dest_V_empty_n ),
    .e_dest_V_read( grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_dest_V_read ),
    .e_dest_V_blk_n( grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_dest_V_blk_n ),
    .ap_return( grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_ap_return ),
    .ap_ce( grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_ap_ce )
);

mmult_accel_core_push_stream_float_4_5_5_s call_ret_mmult_accel_core_push_stream_float_4_5_5_s_fu_590(
    .v_read( call_ret_mmult_accel_core_push_stream_float_4_5_5_s_fu_590_v_read ),
    .last( call_ret_mmult_accel_core_push_stream_float_4_5_5_s_fu_590_last ),
    .ap_return_0( call_ret_mmult_accel_core_push_stream_float_4_5_5_s_fu_590_ap_return_0 ),
    .ap_return_1( call_ret_mmult_accel_core_push_stream_float_4_5_5_s_fu_590_ap_return_1 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_reg_ppiten_pp0_it0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it0
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & ~(ap_sig_bdd_126 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(exitcond_flatten_fu_597_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
        end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it1 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & ~(ap_sig_bdd_126 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & (exitcond_flatten_fu_597_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
        end else if ((((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0)) | ((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & ~(ap_sig_bdd_126 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(exitcond_flatten_fu_597_p2 == ap_const_lv1_0)))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
        end
    end
end

/// ap_reg_ppiten_pp1_it0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it0
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp1_stg0_fsm_2 == ap_CS_fsm) & ~(ap_sig_bdd_152 & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)) & ~(ap_const_lv1_0 == exitcond_flatten8_fu_675_p2))) begin
            ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
        end else if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_126 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(exitcond_flatten_fu_597_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp1_it1 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it1
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp1_stg0_fsm_2 == ap_CS_fsm) & ~(ap_sig_bdd_152 & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)) & (ap_const_lv1_0 == exitcond_flatten8_fu_675_p2))) begin
            ap_reg_ppiten_pp1_it1 <= ap_const_logic_1;
        end else if ((((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_126 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(exitcond_flatten_fu_597_p2 == ap_const_lv1_0)) | ((ap_ST_pp1_stg0_fsm_2 == ap_CS_fsm) & ~(ap_sig_bdd_152 & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)) & ~(ap_const_lv1_0 == exitcond_flatten8_fu_675_p2)))) begin
            ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
        end
    end
end

/// ap_reg_ppiten_pp2_it0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp2_it0
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp2_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp2_stg0_fsm_5 == ap_CS_fsm) & ~(ap_sig_bdd_197 & (ap_const_logic_1 == ap_reg_ppiten_pp2_it1)) & ~(ap_const_lv1_0 == exitcond_flatten1_fu_762_p2))) begin
            ap_reg_ppiten_pp2_it0 <= ap_const_logic_0;
        end else if (((ap_ST_st7_fsm_4 == ap_CS_fsm) & ~(ap_const_logic_0 == grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_ap_done))) begin
            ap_reg_ppiten_pp2_it0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp2_it1 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp2_it1
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp2_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp2_stg0_fsm_5 == ap_CS_fsm) & ~(ap_sig_bdd_197 & (ap_const_logic_1 == ap_reg_ppiten_pp2_it1)) & (ap_const_lv1_0 == exitcond_flatten1_fu_762_p2))) begin
            ap_reg_ppiten_pp2_it1 <= ap_const_logic_1;
        end else if ((((ap_ST_st7_fsm_4 == ap_CS_fsm) & ~(ap_const_logic_0 == grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_ap_done)) | ((ap_ST_pp2_stg0_fsm_5 == ap_CS_fsm) & ~(ap_sig_bdd_197 & (ap_const_logic_1 == ap_reg_ppiten_pp2_it1)) & ~(ap_const_lv1_0 == exitcond_flatten1_fu_762_p2)))) begin
            ap_reg_ppiten_pp2_it1 <= ap_const_logic_0;
        end
    end
end

/// grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_ap_start_ap_start_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_ap_start_ap_start_reg
    if (ap_rst == 1'b1) begin
        grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_ap_start_ap_start_reg <= ap_const_logic_0;
    end else begin
        if ((ap_ST_st6_fsm_3 == ap_CS_fsm)) begin
            grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_ap_start_ap_start_reg <= ap_const_logic_1;
        end else if ((ap_const_logic_1 == grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_ap_ready)) begin
            grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_ap_start_ap_start_reg <= ap_const_logic_0;
        end
    end
end

/// grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_ap_start_ap_start_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_ap_start_ap_start_reg
    if (ap_rst == 1'b1) begin
        grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_ap_start_ap_start_reg <= ap_const_logic_0;
    end else begin
        if ((((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_126 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & (exitcond_flatten_fu_597_p2 == ap_const_lv1_0)) | ((ap_ST_pp1_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it0) & ~(ap_sig_bdd_152 & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)) & (ap_const_lv1_0 == exitcond_flatten8_fu_675_p2)))) begin
            grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_ap_start_ap_start_reg <= ap_const_logic_1;
        end else if ((ap_const_logic_1 == grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_ap_ready)) begin
            grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_ap_start_ap_start_reg <= ap_const_logic_0;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_126 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(exitcond_flatten_fu_597_p2 == ap_const_lv1_0))) begin
        i1_reg_479 <= ap_const_lv5_0;
    end else if (((ap_ST_pp1_stg0_fsm_2 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond_flatten8_reg_902) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1) & ~(ap_sig_bdd_152 & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)))) begin
        i1_reg_479 <= i1_mid2_reg_911;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp2_stg0_fsm_5 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond_flatten1_reg_930) & (ap_const_logic_1 == ap_reg_ppiten_pp2_it1) & ~(ap_sig_bdd_197 & (ap_const_logic_1 == ap_reg_ppiten_pp2_it1)))) begin
        i4_reg_512 <= i4_mid2_reg_939;
    end else if (((ap_ST_st7_fsm_4 == ap_CS_fsm) & ~(ap_const_logic_0 == grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_ap_done))) begin
        i4_reg_512 <= ap_const_lv5_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (exitcond_flatten_reg_873 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_126 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        i_reg_446 <= i_mid2_reg_882;
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
        i_reg_446 <= ap_const_lv5_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp2_stg0_fsm_5 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp2_it0) & ~(ap_sig_bdd_197 & (ap_const_logic_1 == ap_reg_ppiten_pp2_it1)) & (ap_const_lv1_0 == exitcond_flatten1_fu_762_p2))) begin
        indvar_flatten1_reg_501 <= indvar_flatten_next1_fu_768_p2;
    end else if (((ap_ST_st7_fsm_4 == ap_CS_fsm) & ~(ap_const_logic_0 == grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_ap_done))) begin
        indvar_flatten1_reg_501 <= ap_const_lv9_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_126 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(exitcond_flatten_fu_597_p2 == ap_const_lv1_0))) begin
        indvar_flatten6_reg_468 <= ap_const_lv9_0;
    end else if (((ap_ST_pp1_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it0) & ~(ap_sig_bdd_152 & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)) & (ap_const_lv1_0 == exitcond_flatten8_fu_675_p2))) begin
        indvar_flatten6_reg_468 <= indvar_flatten_next7_fu_681_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_126 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & (exitcond_flatten_fu_597_p2 == ap_const_lv1_0))) begin
        indvar_flatten_reg_435 <= indvar_flatten_next_fu_603_p2;
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
        indvar_flatten_reg_435 <= ap_const_lv9_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_126 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(exitcond_flatten_fu_597_p2 == ap_const_lv1_0))) begin
        j2_reg_490 <= ap_const_lv5_0;
    end else if (((ap_ST_pp1_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it0) & ~(ap_sig_bdd_152 & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)) & (ap_const_lv1_0 == exitcond_flatten8_fu_675_p2))) begin
        j2_reg_490 <= j_2_fu_745_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp2_stg0_fsm_5 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp2_it0) & ~(ap_sig_bdd_197 & (ap_const_logic_1 == ap_reg_ppiten_pp2_it1)) & (ap_const_lv1_0 == exitcond_flatten1_fu_762_p2))) begin
        j5_reg_523 <= j_3_fu_857_p2;
    end else if (((ap_ST_st7_fsm_4 == ap_CS_fsm) & ~(ap_const_logic_0 == grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_ap_done))) begin
        j5_reg_523 <= ap_const_lv5_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_126 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & (exitcond_flatten_fu_597_p2 == ap_const_lv1_0))) begin
        j_reg_457 <= j_1_fu_651_p2;
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
        j_reg_457 <= ap_const_lv5_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp1_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it0) & ~(ap_sig_bdd_152 & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)) & (ap_const_lv1_0 == exitcond_flatten8_fu_675_p2))) begin
        arrayNo1_cast_reg_916 <= {{i1_mid2_fu_707_p3[ap_const_lv32_4 : ap_const_lv32_1]}};
        i1_mid2_reg_911 <= i1_mid2_fu_707_p3;
        p_addr3_reg_920 <= p_addr3_fu_739_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_126 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & (exitcond_flatten_fu_597_p2 == ap_const_lv1_0))) begin
        arrayNo_cast_reg_888 <= {{j_mid2_fu_615_p3[ap_const_lv32_4 : ap_const_lv32_1]}};
        i_mid2_reg_882 <= i_mid2_fu_629_p3;
        tmp_3_reg_892 <= tmp_3_fu_647_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp2_stg0_fsm_5 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp2_it0) & ~(ap_sig_bdd_197 & (ap_const_logic_1 == ap_reg_ppiten_pp2_it1)))) begin
        exitcond_flatten1_reg_930 <= exitcond_flatten1_fu_762_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp1_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it0) & ~(ap_sig_bdd_152 & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)))) begin
        exitcond_flatten8_reg_902 <= exitcond_flatten8_fu_675_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_126 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        exitcond_flatten_reg_873 <= exitcond_flatten_fu_597_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp2_stg0_fsm_5 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp2_it0) & ~(ap_sig_bdd_197 & (ap_const_logic_1 == ap_reg_ppiten_pp2_it1)) & (ap_const_lv1_0 == exitcond_flatten1_fu_762_p2))) begin
        i4_mid2_reg_939 <= i4_mid2_fu_794_p3;
        tmp_1_reg_949 <= tmp_1_fu_851_p2;
    end
end

/// a_0_1_address0 assign process. ///
always @ (ap_CS_fsm or ap_reg_ppiten_pp0_it1 or grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_0_address0 or tmp_5_fu_663_p1)
begin
    if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
        a_0_1_address0 = tmp_5_fu_663_p1;
    end else if ((ap_ST_st7_fsm_4 == ap_CS_fsm)) begin
        a_0_1_address0 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_0_address0;
    end else begin
        a_0_1_address0 = 'bx;
    end
end

/// a_0_1_ce0 assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_126 or ap_reg_ppiten_pp0_it1 or grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_0_ce0)
begin
    if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_126 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        a_0_1_ce0 = ap_const_logic_1;
    end else if ((ap_ST_st7_fsm_4 == ap_CS_fsm)) begin
        a_0_1_ce0 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_0_ce0;
    end else begin
        a_0_1_ce0 = ap_const_logic_0;
    end
end

/// a_0_1_ce1 assign process. ///
always @ (ap_CS_fsm or grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_0_ce1)
begin
    if ((ap_ST_st7_fsm_4 == ap_CS_fsm)) begin
        a_0_1_ce1 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_0_ce1;
    end else begin
        a_0_1_ce1 = ap_const_logic_0;
    end
end

/// a_0_1_we0 assign process. ///
always @ (ap_CS_fsm or exitcond_flatten_reg_873 or ap_sig_bdd_126 or ap_reg_ppiten_pp0_it1 or arrayNo_cast_reg_888)
begin
    if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (exitcond_flatten_reg_873 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_126 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & (arrayNo_cast_reg_888 == ap_const_lv4_0))) begin
        a_0_1_we0 = ap_const_logic_1;
    end else begin
        a_0_1_we0 = ap_const_logic_0;
    end
end

/// a_1_1_address0 assign process. ///
always @ (ap_CS_fsm or ap_reg_ppiten_pp0_it1 or grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_1_address0 or tmp_5_fu_663_p1)
begin
    if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
        a_1_1_address0 = tmp_5_fu_663_p1;
    end else if ((ap_ST_st7_fsm_4 == ap_CS_fsm)) begin
        a_1_1_address0 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_1_address0;
    end else begin
        a_1_1_address0 = 'bx;
    end
end

/// a_1_1_ce0 assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_126 or ap_reg_ppiten_pp0_it1 or grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_1_ce0)
begin
    if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_126 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        a_1_1_ce0 = ap_const_logic_1;
    end else if ((ap_ST_st7_fsm_4 == ap_CS_fsm)) begin
        a_1_1_ce0 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_1_ce0;
    end else begin
        a_1_1_ce0 = ap_const_logic_0;
    end
end

/// a_1_1_ce1 assign process. ///
always @ (ap_CS_fsm or grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_1_ce1)
begin
    if ((ap_ST_st7_fsm_4 == ap_CS_fsm)) begin
        a_1_1_ce1 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_1_ce1;
    end else begin
        a_1_1_ce1 = ap_const_logic_0;
    end
end

/// a_1_1_we0 assign process. ///
always @ (ap_CS_fsm or exitcond_flatten_reg_873 or ap_sig_bdd_126 or ap_reg_ppiten_pp0_it1 or arrayNo_cast_reg_888)
begin
    if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (exitcond_flatten_reg_873 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_126 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & (arrayNo_cast_reg_888 == ap_const_lv4_1))) begin
        a_1_1_we0 = ap_const_logic_1;
    end else begin
        a_1_1_we0 = ap_const_logic_0;
    end
end

/// a_2_1_address0 assign process. ///
always @ (ap_CS_fsm or ap_reg_ppiten_pp0_it1 or grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_2_address0 or tmp_5_fu_663_p1)
begin
    if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
        a_2_1_address0 = tmp_5_fu_663_p1;
    end else if ((ap_ST_st7_fsm_4 == ap_CS_fsm)) begin
        a_2_1_address0 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_2_address0;
    end else begin
        a_2_1_address0 = 'bx;
    end
end

/// a_2_1_ce0 assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_126 or ap_reg_ppiten_pp0_it1 or grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_2_ce0)
begin
    if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_126 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        a_2_1_ce0 = ap_const_logic_1;
    end else if ((ap_ST_st7_fsm_4 == ap_CS_fsm)) begin
        a_2_1_ce0 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_2_ce0;
    end else begin
        a_2_1_ce0 = ap_const_logic_0;
    end
end

/// a_2_1_ce1 assign process. ///
always @ (ap_CS_fsm or grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_2_ce1)
begin
    if ((ap_ST_st7_fsm_4 == ap_CS_fsm)) begin
        a_2_1_ce1 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_2_ce1;
    end else begin
        a_2_1_ce1 = ap_const_logic_0;
    end
end

/// a_2_1_we0 assign process. ///
always @ (ap_CS_fsm or exitcond_flatten_reg_873 or ap_sig_bdd_126 or ap_reg_ppiten_pp0_it1 or arrayNo_cast_reg_888)
begin
    if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (exitcond_flatten_reg_873 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_126 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & (arrayNo_cast_reg_888 == ap_const_lv4_2))) begin
        a_2_1_we0 = ap_const_logic_1;
    end else begin
        a_2_1_we0 = ap_const_logic_0;
    end
end

/// a_3_1_address0 assign process. ///
always @ (ap_CS_fsm or ap_reg_ppiten_pp0_it1 or grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_3_address0 or tmp_5_fu_663_p1)
begin
    if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
        a_3_1_address0 = tmp_5_fu_663_p1;
    end else if ((ap_ST_st7_fsm_4 == ap_CS_fsm)) begin
        a_3_1_address0 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_3_address0;
    end else begin
        a_3_1_address0 = 'bx;
    end
end

/// a_3_1_ce0 assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_126 or ap_reg_ppiten_pp0_it1 or grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_3_ce0)
begin
    if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_126 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        a_3_1_ce0 = ap_const_logic_1;
    end else if ((ap_ST_st7_fsm_4 == ap_CS_fsm)) begin
        a_3_1_ce0 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_3_ce0;
    end else begin
        a_3_1_ce0 = ap_const_logic_0;
    end
end

/// a_3_1_ce1 assign process. ///
always @ (ap_CS_fsm or grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_3_ce1)
begin
    if ((ap_ST_st7_fsm_4 == ap_CS_fsm)) begin
        a_3_1_ce1 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_3_ce1;
    end else begin
        a_3_1_ce1 = ap_const_logic_0;
    end
end

/// a_3_1_we0 assign process. ///
always @ (ap_CS_fsm or exitcond_flatten_reg_873 or ap_sig_bdd_126 or ap_reg_ppiten_pp0_it1 or arrayNo_cast_reg_888)
begin
    if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (exitcond_flatten_reg_873 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_126 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & (arrayNo_cast_reg_888 == ap_const_lv4_3))) begin
        a_3_1_we0 = ap_const_logic_1;
    end else begin
        a_3_1_we0 = ap_const_logic_0;
    end
end

/// a_4_1_address0 assign process. ///
always @ (ap_CS_fsm or ap_reg_ppiten_pp0_it1 or grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_4_address0 or tmp_5_fu_663_p1)
begin
    if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
        a_4_1_address0 = tmp_5_fu_663_p1;
    end else if ((ap_ST_st7_fsm_4 == ap_CS_fsm)) begin
        a_4_1_address0 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_4_address0;
    end else begin
        a_4_1_address0 = 'bx;
    end
end

/// a_4_1_ce0 assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_126 or ap_reg_ppiten_pp0_it1 or grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_4_ce0)
begin
    if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_126 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        a_4_1_ce0 = ap_const_logic_1;
    end else if ((ap_ST_st7_fsm_4 == ap_CS_fsm)) begin
        a_4_1_ce0 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_4_ce0;
    end else begin
        a_4_1_ce0 = ap_const_logic_0;
    end
end

/// a_4_1_ce1 assign process. ///
always @ (ap_CS_fsm or grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_4_ce1)
begin
    if ((ap_ST_st7_fsm_4 == ap_CS_fsm)) begin
        a_4_1_ce1 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_4_ce1;
    end else begin
        a_4_1_ce1 = ap_const_logic_0;
    end
end

/// a_4_1_we0 assign process. ///
always @ (ap_CS_fsm or exitcond_flatten_reg_873 or ap_sig_bdd_126 or ap_reg_ppiten_pp0_it1 or arrayNo_cast_reg_888)
begin
    if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (exitcond_flatten_reg_873 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_126 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & (arrayNo_cast_reg_888 == ap_const_lv4_4))) begin
        a_4_1_we0 = ap_const_logic_1;
    end else begin
        a_4_1_we0 = ap_const_logic_0;
    end
end

/// a_5_1_address0 assign process. ///
always @ (ap_CS_fsm or ap_reg_ppiten_pp0_it1 or grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_5_address0 or tmp_5_fu_663_p1)
begin
    if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
        a_5_1_address0 = tmp_5_fu_663_p1;
    end else if ((ap_ST_st7_fsm_4 == ap_CS_fsm)) begin
        a_5_1_address0 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_5_address0;
    end else begin
        a_5_1_address0 = 'bx;
    end
end

/// a_5_1_ce0 assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_126 or ap_reg_ppiten_pp0_it1 or grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_5_ce0)
begin
    if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_126 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        a_5_1_ce0 = ap_const_logic_1;
    end else if ((ap_ST_st7_fsm_4 == ap_CS_fsm)) begin
        a_5_1_ce0 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_5_ce0;
    end else begin
        a_5_1_ce0 = ap_const_logic_0;
    end
end

/// a_5_1_ce1 assign process. ///
always @ (ap_CS_fsm or grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_5_ce1)
begin
    if ((ap_ST_st7_fsm_4 == ap_CS_fsm)) begin
        a_5_1_ce1 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_5_ce1;
    end else begin
        a_5_1_ce1 = ap_const_logic_0;
    end
end

/// a_5_1_we0 assign process. ///
always @ (ap_CS_fsm or exitcond_flatten_reg_873 or ap_sig_bdd_126 or ap_reg_ppiten_pp0_it1 or arrayNo_cast_reg_888)
begin
    if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (exitcond_flatten_reg_873 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_126 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & (arrayNo_cast_reg_888 == ap_const_lv4_5))) begin
        a_5_1_we0 = ap_const_logic_1;
    end else begin
        a_5_1_we0 = ap_const_logic_0;
    end
end

/// a_6_1_address0 assign process. ///
always @ (ap_CS_fsm or ap_reg_ppiten_pp0_it1 or grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_6_address0 or tmp_5_fu_663_p1)
begin
    if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
        a_6_1_address0 = tmp_5_fu_663_p1;
    end else if ((ap_ST_st7_fsm_4 == ap_CS_fsm)) begin
        a_6_1_address0 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_6_address0;
    end else begin
        a_6_1_address0 = 'bx;
    end
end

/// a_6_1_ce0 assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_126 or ap_reg_ppiten_pp0_it1 or grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_6_ce0)
begin
    if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_126 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        a_6_1_ce0 = ap_const_logic_1;
    end else if ((ap_ST_st7_fsm_4 == ap_CS_fsm)) begin
        a_6_1_ce0 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_6_ce0;
    end else begin
        a_6_1_ce0 = ap_const_logic_0;
    end
end

/// a_6_1_ce1 assign process. ///
always @ (ap_CS_fsm or grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_6_ce1)
begin
    if ((ap_ST_st7_fsm_4 == ap_CS_fsm)) begin
        a_6_1_ce1 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_6_ce1;
    end else begin
        a_6_1_ce1 = ap_const_logic_0;
    end
end

/// a_6_1_we0 assign process. ///
always @ (ap_CS_fsm or exitcond_flatten_reg_873 or ap_sig_bdd_126 or ap_reg_ppiten_pp0_it1 or arrayNo_cast_reg_888)
begin
    if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (exitcond_flatten_reg_873 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_126 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & (arrayNo_cast_reg_888 == ap_const_lv4_6))) begin
        a_6_1_we0 = ap_const_logic_1;
    end else begin
        a_6_1_we0 = ap_const_logic_0;
    end
end

/// a_7_1_address0 assign process. ///
always @ (ap_CS_fsm or ap_reg_ppiten_pp0_it1 or grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_7_address0 or tmp_5_fu_663_p1)
begin
    if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
        a_7_1_address0 = tmp_5_fu_663_p1;
    end else if ((ap_ST_st7_fsm_4 == ap_CS_fsm)) begin
        a_7_1_address0 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_7_address0;
    end else begin
        a_7_1_address0 = 'bx;
    end
end

/// a_7_1_ce0 assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_126 or ap_reg_ppiten_pp0_it1 or grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_7_ce0)
begin
    if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_126 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        a_7_1_ce0 = ap_const_logic_1;
    end else if ((ap_ST_st7_fsm_4 == ap_CS_fsm)) begin
        a_7_1_ce0 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_7_ce0;
    end else begin
        a_7_1_ce0 = ap_const_logic_0;
    end
end

/// a_7_1_ce1 assign process. ///
always @ (ap_CS_fsm or grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_7_ce1)
begin
    if ((ap_ST_st7_fsm_4 == ap_CS_fsm)) begin
        a_7_1_ce1 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_7_ce1;
    end else begin
        a_7_1_ce1 = ap_const_logic_0;
    end
end

/// a_7_1_we0 assign process. ///
always @ (ap_CS_fsm or exitcond_flatten_reg_873 or ap_sig_bdd_126 or ap_reg_ppiten_pp0_it1 or arrayNo_cast_reg_888)
begin
    if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (exitcond_flatten_reg_873 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_126 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(arrayNo_cast_reg_888 == ap_const_lv4_6) & ~(arrayNo_cast_reg_888 == ap_const_lv4_5) & ~(arrayNo_cast_reg_888 == ap_const_lv4_4) & ~(arrayNo_cast_reg_888 == ap_const_lv4_3) & ~(arrayNo_cast_reg_888 == ap_const_lv4_2) & ~(arrayNo_cast_reg_888 == ap_const_lv4_1) & ~(arrayNo_cast_reg_888 == ap_const_lv4_0))) begin
        a_7_1_we0 = ap_const_logic_1;
    end else begin
        a_7_1_we0 = ap_const_logic_0;
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) | (ap_ST_st10_fsm_6 == ap_CS_fsm))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st10_fsm_6 == ap_CS_fsm)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// b_0_1_address0 assign process. ///
always @ (ap_CS_fsm or ap_reg_ppiten_pp1_it1 or grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_0_address0 or tmp_10_fu_751_p1)
begin
    if (((ap_ST_pp1_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1))) begin
        b_0_1_address0 = tmp_10_fu_751_p1;
    end else if ((ap_ST_st7_fsm_4 == ap_CS_fsm)) begin
        b_0_1_address0 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_0_address0;
    end else begin
        b_0_1_address0 = 'bx;
    end
end

/// b_0_1_ce0 assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_152 or ap_reg_ppiten_pp1_it1 or grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_0_ce0)
begin
    if (((ap_ST_pp1_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1) & ~(ap_sig_bdd_152 & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)))) begin
        b_0_1_ce0 = ap_const_logic_1;
    end else if ((ap_ST_st7_fsm_4 == ap_CS_fsm)) begin
        b_0_1_ce0 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_0_ce0;
    end else begin
        b_0_1_ce0 = ap_const_logic_0;
    end
end

/// b_0_1_ce1 assign process. ///
always @ (ap_CS_fsm or grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_0_ce1)
begin
    if ((ap_ST_st7_fsm_4 == ap_CS_fsm)) begin
        b_0_1_ce1 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_0_ce1;
    end else begin
        b_0_1_ce1 = ap_const_logic_0;
    end
end

/// b_0_1_we0 assign process. ///
always @ (ap_CS_fsm or exitcond_flatten8_reg_902 or ap_sig_bdd_152 or ap_reg_ppiten_pp1_it1 or arrayNo1_cast_reg_916)
begin
    if (((ap_ST_pp1_stg0_fsm_2 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond_flatten8_reg_902) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1) & ~(ap_sig_bdd_152 & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)) & (arrayNo1_cast_reg_916 == ap_const_lv4_0))) begin
        b_0_1_we0 = ap_const_logic_1;
    end else begin
        b_0_1_we0 = ap_const_logic_0;
    end
end

/// b_1_1_address0 assign process. ///
always @ (ap_CS_fsm or ap_reg_ppiten_pp1_it1 or grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_1_address0 or tmp_10_fu_751_p1)
begin
    if (((ap_ST_pp1_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1))) begin
        b_1_1_address0 = tmp_10_fu_751_p1;
    end else if ((ap_ST_st7_fsm_4 == ap_CS_fsm)) begin
        b_1_1_address0 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_1_address0;
    end else begin
        b_1_1_address0 = 'bx;
    end
end

/// b_1_1_ce0 assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_152 or ap_reg_ppiten_pp1_it1 or grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_1_ce0)
begin
    if (((ap_ST_pp1_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1) & ~(ap_sig_bdd_152 & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)))) begin
        b_1_1_ce0 = ap_const_logic_1;
    end else if ((ap_ST_st7_fsm_4 == ap_CS_fsm)) begin
        b_1_1_ce0 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_1_ce0;
    end else begin
        b_1_1_ce0 = ap_const_logic_0;
    end
end

/// b_1_1_ce1 assign process. ///
always @ (ap_CS_fsm or grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_1_ce1)
begin
    if ((ap_ST_st7_fsm_4 == ap_CS_fsm)) begin
        b_1_1_ce1 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_1_ce1;
    end else begin
        b_1_1_ce1 = ap_const_logic_0;
    end
end

/// b_1_1_we0 assign process. ///
always @ (ap_CS_fsm or exitcond_flatten8_reg_902 or ap_sig_bdd_152 or ap_reg_ppiten_pp1_it1 or arrayNo1_cast_reg_916)
begin
    if (((ap_ST_pp1_stg0_fsm_2 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond_flatten8_reg_902) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1) & ~(ap_sig_bdd_152 & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)) & (arrayNo1_cast_reg_916 == ap_const_lv4_1))) begin
        b_1_1_we0 = ap_const_logic_1;
    end else begin
        b_1_1_we0 = ap_const_logic_0;
    end
end

/// b_2_1_address0 assign process. ///
always @ (ap_CS_fsm or ap_reg_ppiten_pp1_it1 or grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_2_address0 or tmp_10_fu_751_p1)
begin
    if (((ap_ST_pp1_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1))) begin
        b_2_1_address0 = tmp_10_fu_751_p1;
    end else if ((ap_ST_st7_fsm_4 == ap_CS_fsm)) begin
        b_2_1_address0 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_2_address0;
    end else begin
        b_2_1_address0 = 'bx;
    end
end

/// b_2_1_ce0 assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_152 or ap_reg_ppiten_pp1_it1 or grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_2_ce0)
begin
    if (((ap_ST_pp1_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1) & ~(ap_sig_bdd_152 & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)))) begin
        b_2_1_ce0 = ap_const_logic_1;
    end else if ((ap_ST_st7_fsm_4 == ap_CS_fsm)) begin
        b_2_1_ce0 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_2_ce0;
    end else begin
        b_2_1_ce0 = ap_const_logic_0;
    end
end

/// b_2_1_ce1 assign process. ///
always @ (ap_CS_fsm or grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_2_ce1)
begin
    if ((ap_ST_st7_fsm_4 == ap_CS_fsm)) begin
        b_2_1_ce1 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_2_ce1;
    end else begin
        b_2_1_ce1 = ap_const_logic_0;
    end
end

/// b_2_1_we0 assign process. ///
always @ (ap_CS_fsm or exitcond_flatten8_reg_902 or ap_sig_bdd_152 or ap_reg_ppiten_pp1_it1 or arrayNo1_cast_reg_916)
begin
    if (((ap_ST_pp1_stg0_fsm_2 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond_flatten8_reg_902) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1) & ~(ap_sig_bdd_152 & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)) & (arrayNo1_cast_reg_916 == ap_const_lv4_2))) begin
        b_2_1_we0 = ap_const_logic_1;
    end else begin
        b_2_1_we0 = ap_const_logic_0;
    end
end

/// b_3_1_address0 assign process. ///
always @ (ap_CS_fsm or ap_reg_ppiten_pp1_it1 or grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_3_address0 or tmp_10_fu_751_p1)
begin
    if (((ap_ST_pp1_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1))) begin
        b_3_1_address0 = tmp_10_fu_751_p1;
    end else if ((ap_ST_st7_fsm_4 == ap_CS_fsm)) begin
        b_3_1_address0 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_3_address0;
    end else begin
        b_3_1_address0 = 'bx;
    end
end

/// b_3_1_ce0 assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_152 or ap_reg_ppiten_pp1_it1 or grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_3_ce0)
begin
    if (((ap_ST_pp1_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1) & ~(ap_sig_bdd_152 & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)))) begin
        b_3_1_ce0 = ap_const_logic_1;
    end else if ((ap_ST_st7_fsm_4 == ap_CS_fsm)) begin
        b_3_1_ce0 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_3_ce0;
    end else begin
        b_3_1_ce0 = ap_const_logic_0;
    end
end

/// b_3_1_ce1 assign process. ///
always @ (ap_CS_fsm or grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_3_ce1)
begin
    if ((ap_ST_st7_fsm_4 == ap_CS_fsm)) begin
        b_3_1_ce1 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_3_ce1;
    end else begin
        b_3_1_ce1 = ap_const_logic_0;
    end
end

/// b_3_1_we0 assign process. ///
always @ (ap_CS_fsm or exitcond_flatten8_reg_902 or ap_sig_bdd_152 or ap_reg_ppiten_pp1_it1 or arrayNo1_cast_reg_916)
begin
    if (((ap_ST_pp1_stg0_fsm_2 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond_flatten8_reg_902) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1) & ~(ap_sig_bdd_152 & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)) & (arrayNo1_cast_reg_916 == ap_const_lv4_3))) begin
        b_3_1_we0 = ap_const_logic_1;
    end else begin
        b_3_1_we0 = ap_const_logic_0;
    end
end

/// b_4_1_address0 assign process. ///
always @ (ap_CS_fsm or ap_reg_ppiten_pp1_it1 or grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_4_address0 or tmp_10_fu_751_p1)
begin
    if (((ap_ST_pp1_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1))) begin
        b_4_1_address0 = tmp_10_fu_751_p1;
    end else if ((ap_ST_st7_fsm_4 == ap_CS_fsm)) begin
        b_4_1_address0 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_4_address0;
    end else begin
        b_4_1_address0 = 'bx;
    end
end

/// b_4_1_ce0 assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_152 or ap_reg_ppiten_pp1_it1 or grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_4_ce0)
begin
    if (((ap_ST_pp1_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1) & ~(ap_sig_bdd_152 & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)))) begin
        b_4_1_ce0 = ap_const_logic_1;
    end else if ((ap_ST_st7_fsm_4 == ap_CS_fsm)) begin
        b_4_1_ce0 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_4_ce0;
    end else begin
        b_4_1_ce0 = ap_const_logic_0;
    end
end

/// b_4_1_ce1 assign process. ///
always @ (ap_CS_fsm or grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_4_ce1)
begin
    if ((ap_ST_st7_fsm_4 == ap_CS_fsm)) begin
        b_4_1_ce1 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_4_ce1;
    end else begin
        b_4_1_ce1 = ap_const_logic_0;
    end
end

/// b_4_1_we0 assign process. ///
always @ (ap_CS_fsm or exitcond_flatten8_reg_902 or ap_sig_bdd_152 or ap_reg_ppiten_pp1_it1 or arrayNo1_cast_reg_916)
begin
    if (((ap_ST_pp1_stg0_fsm_2 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond_flatten8_reg_902) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1) & ~(ap_sig_bdd_152 & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)) & (arrayNo1_cast_reg_916 == ap_const_lv4_4))) begin
        b_4_1_we0 = ap_const_logic_1;
    end else begin
        b_4_1_we0 = ap_const_logic_0;
    end
end

/// b_5_1_address0 assign process. ///
always @ (ap_CS_fsm or ap_reg_ppiten_pp1_it1 or grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_5_address0 or tmp_10_fu_751_p1)
begin
    if (((ap_ST_pp1_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1))) begin
        b_5_1_address0 = tmp_10_fu_751_p1;
    end else if ((ap_ST_st7_fsm_4 == ap_CS_fsm)) begin
        b_5_1_address0 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_5_address0;
    end else begin
        b_5_1_address0 = 'bx;
    end
end

/// b_5_1_ce0 assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_152 or ap_reg_ppiten_pp1_it1 or grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_5_ce0)
begin
    if (((ap_ST_pp1_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1) & ~(ap_sig_bdd_152 & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)))) begin
        b_5_1_ce0 = ap_const_logic_1;
    end else if ((ap_ST_st7_fsm_4 == ap_CS_fsm)) begin
        b_5_1_ce0 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_5_ce0;
    end else begin
        b_5_1_ce0 = ap_const_logic_0;
    end
end

/// b_5_1_ce1 assign process. ///
always @ (ap_CS_fsm or grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_5_ce1)
begin
    if ((ap_ST_st7_fsm_4 == ap_CS_fsm)) begin
        b_5_1_ce1 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_5_ce1;
    end else begin
        b_5_1_ce1 = ap_const_logic_0;
    end
end

/// b_5_1_we0 assign process. ///
always @ (ap_CS_fsm or exitcond_flatten8_reg_902 or ap_sig_bdd_152 or ap_reg_ppiten_pp1_it1 or arrayNo1_cast_reg_916)
begin
    if (((ap_ST_pp1_stg0_fsm_2 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond_flatten8_reg_902) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1) & ~(ap_sig_bdd_152 & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)) & (arrayNo1_cast_reg_916 == ap_const_lv4_5))) begin
        b_5_1_we0 = ap_const_logic_1;
    end else begin
        b_5_1_we0 = ap_const_logic_0;
    end
end

/// b_6_1_address0 assign process. ///
always @ (ap_CS_fsm or ap_reg_ppiten_pp1_it1 or grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_6_address0 or tmp_10_fu_751_p1)
begin
    if (((ap_ST_pp1_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1))) begin
        b_6_1_address0 = tmp_10_fu_751_p1;
    end else if ((ap_ST_st7_fsm_4 == ap_CS_fsm)) begin
        b_6_1_address0 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_6_address0;
    end else begin
        b_6_1_address0 = 'bx;
    end
end

/// b_6_1_ce0 assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_152 or ap_reg_ppiten_pp1_it1 or grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_6_ce0)
begin
    if (((ap_ST_pp1_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1) & ~(ap_sig_bdd_152 & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)))) begin
        b_6_1_ce0 = ap_const_logic_1;
    end else if ((ap_ST_st7_fsm_4 == ap_CS_fsm)) begin
        b_6_1_ce0 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_6_ce0;
    end else begin
        b_6_1_ce0 = ap_const_logic_0;
    end
end

/// b_6_1_ce1 assign process. ///
always @ (ap_CS_fsm or grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_6_ce1)
begin
    if ((ap_ST_st7_fsm_4 == ap_CS_fsm)) begin
        b_6_1_ce1 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_6_ce1;
    end else begin
        b_6_1_ce1 = ap_const_logic_0;
    end
end

/// b_6_1_we0 assign process. ///
always @ (ap_CS_fsm or exitcond_flatten8_reg_902 or ap_sig_bdd_152 or ap_reg_ppiten_pp1_it1 or arrayNo1_cast_reg_916)
begin
    if (((ap_ST_pp1_stg0_fsm_2 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond_flatten8_reg_902) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1) & ~(ap_sig_bdd_152 & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)) & (arrayNo1_cast_reg_916 == ap_const_lv4_6))) begin
        b_6_1_we0 = ap_const_logic_1;
    end else begin
        b_6_1_we0 = ap_const_logic_0;
    end
end

/// b_7_1_address0 assign process. ///
always @ (ap_CS_fsm or ap_reg_ppiten_pp1_it1 or grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_7_address0 or tmp_10_fu_751_p1)
begin
    if (((ap_ST_pp1_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1))) begin
        b_7_1_address0 = tmp_10_fu_751_p1;
    end else if ((ap_ST_st7_fsm_4 == ap_CS_fsm)) begin
        b_7_1_address0 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_7_address0;
    end else begin
        b_7_1_address0 = 'bx;
    end
end

/// b_7_1_ce0 assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_152 or ap_reg_ppiten_pp1_it1 or grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_7_ce0)
begin
    if (((ap_ST_pp1_stg0_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1) & ~(ap_sig_bdd_152 & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)))) begin
        b_7_1_ce0 = ap_const_logic_1;
    end else if ((ap_ST_st7_fsm_4 == ap_CS_fsm)) begin
        b_7_1_ce0 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_7_ce0;
    end else begin
        b_7_1_ce0 = ap_const_logic_0;
    end
end

/// b_7_1_ce1 assign process. ///
always @ (ap_CS_fsm or grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_7_ce1)
begin
    if ((ap_ST_st7_fsm_4 == ap_CS_fsm)) begin
        b_7_1_ce1 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_7_ce1;
    end else begin
        b_7_1_ce1 = ap_const_logic_0;
    end
end

/// b_7_1_we0 assign process. ///
always @ (ap_CS_fsm or exitcond_flatten8_reg_902 or ap_sig_bdd_152 or ap_reg_ppiten_pp1_it1 or arrayNo1_cast_reg_916)
begin
    if (((ap_ST_pp1_stg0_fsm_2 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond_flatten8_reg_902) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1) & ~(ap_sig_bdd_152 & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)) & ~(arrayNo1_cast_reg_916 == ap_const_lv4_6) & ~(arrayNo1_cast_reg_916 == ap_const_lv4_5) & ~(arrayNo1_cast_reg_916 == ap_const_lv4_4) & ~(arrayNo1_cast_reg_916 == ap_const_lv4_3) & ~(arrayNo1_cast_reg_916 == ap_const_lv4_2) & ~(arrayNo1_cast_reg_916 == ap_const_lv4_1) & ~(arrayNo1_cast_reg_916 == ap_const_lv4_0))) begin
        b_7_1_we0 = ap_const_logic_1;
    end else begin
        b_7_1_we0 = ap_const_logic_0;
    end
end

/// grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_ap_ce assign process. ///
always @ (ap_CS_fsm or exitcond_flatten_reg_873 or exitcond_flatten8_reg_902)
begin
    if ((((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (exitcond_flatten_reg_873 == ap_const_lv1_0)) | ((ap_ST_pp1_stg0_fsm_2 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond_flatten8_reg_902)))) begin
        grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_ap_ce = ap_const_logic_1;
    end else begin
        grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_ap_ce = ap_const_logic_0;
    end
end

/// i1_phi_fu_483_p4 assign process. ///
always @ (ap_CS_fsm or i1_reg_479 or exitcond_flatten8_reg_902 or ap_reg_ppiten_pp1_it1 or i1_mid2_reg_911)
begin
    if (((ap_ST_pp1_stg0_fsm_2 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond_flatten8_reg_902) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1))) begin
        i1_phi_fu_483_p4 = i1_mid2_reg_911;
    end else begin
        i1_phi_fu_483_p4 = i1_reg_479;
    end
end

/// i4_phi_fu_516_p4 assign process. ///
always @ (ap_CS_fsm or i4_reg_512 or exitcond_flatten1_reg_930 or ap_reg_ppiten_pp2_it1 or i4_mid2_reg_939)
begin
    if (((ap_ST_pp2_stg0_fsm_5 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond_flatten1_reg_930) & (ap_const_logic_1 == ap_reg_ppiten_pp2_it1))) begin
        i4_phi_fu_516_p4 = i4_mid2_reg_939;
    end else begin
        i4_phi_fu_516_p4 = i4_reg_512;
    end
end

/// i_phi_fu_450_p4 assign process. ///
always @ (ap_CS_fsm or i_reg_446 or exitcond_flatten_reg_873 or ap_reg_ppiten_pp0_it1 or i_mid2_reg_882)
begin
    if (((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (exitcond_flatten_reg_873 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
        i_phi_fu_450_p4 = i_mid2_reg_882;
    end else begin
        i_phi_fu_450_p4 = i_reg_446;
    end
end

/// in_stream_data_V_read assign process. ///
always @ (ap_CS_fsm or exitcond_flatten_reg_873 or ap_reg_ppiten_pp0_it1 or exitcond_flatten8_reg_902 or ap_reg_ppiten_pp1_it1 or grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_data_V_read)
begin
    if ((((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (exitcond_flatten_reg_873 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | ((ap_ST_pp1_stg0_fsm_2 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond_flatten8_reg_902) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)))) begin
        in_stream_data_V_read = grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_data_V_read;
    end else begin
        in_stream_data_V_read = ap_const_logic_0;
    end
end

/// in_stream_dest_V_read assign process. ///
always @ (ap_CS_fsm or exitcond_flatten_reg_873 or ap_reg_ppiten_pp0_it1 or exitcond_flatten8_reg_902 or ap_reg_ppiten_pp1_it1 or grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_dest_V_read)
begin
    if ((((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (exitcond_flatten_reg_873 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | ((ap_ST_pp1_stg0_fsm_2 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond_flatten8_reg_902) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)))) begin
        in_stream_dest_V_read = grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_dest_V_read;
    end else begin
        in_stream_dest_V_read = ap_const_logic_0;
    end
end

/// in_stream_id_V_read assign process. ///
always @ (ap_CS_fsm or exitcond_flatten_reg_873 or ap_reg_ppiten_pp0_it1 or exitcond_flatten8_reg_902 or ap_reg_ppiten_pp1_it1 or grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_id_V_read)
begin
    if ((((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (exitcond_flatten_reg_873 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | ((ap_ST_pp1_stg0_fsm_2 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond_flatten8_reg_902) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)))) begin
        in_stream_id_V_read = grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_id_V_read;
    end else begin
        in_stream_id_V_read = ap_const_logic_0;
    end
end

/// in_stream_keep_V_read assign process. ///
always @ (ap_CS_fsm or exitcond_flatten_reg_873 or ap_reg_ppiten_pp0_it1 or exitcond_flatten8_reg_902 or ap_reg_ppiten_pp1_it1 or grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_keep_V_read)
begin
    if ((((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (exitcond_flatten_reg_873 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | ((ap_ST_pp1_stg0_fsm_2 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond_flatten8_reg_902) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)))) begin
        in_stream_keep_V_read = grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_keep_V_read;
    end else begin
        in_stream_keep_V_read = ap_const_logic_0;
    end
end

/// in_stream_last_V_read assign process. ///
always @ (ap_CS_fsm or exitcond_flatten_reg_873 or ap_reg_ppiten_pp0_it1 or exitcond_flatten8_reg_902 or ap_reg_ppiten_pp1_it1 or grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_last_V_read)
begin
    if ((((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (exitcond_flatten_reg_873 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | ((ap_ST_pp1_stg0_fsm_2 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond_flatten8_reg_902) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)))) begin
        in_stream_last_V_read = grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_last_V_read;
    end else begin
        in_stream_last_V_read = ap_const_logic_0;
    end
end

/// in_stream_strb_V_read assign process. ///
always @ (ap_CS_fsm or exitcond_flatten_reg_873 or ap_reg_ppiten_pp0_it1 or exitcond_flatten8_reg_902 or ap_reg_ppiten_pp1_it1 or grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_strb_V_read)
begin
    if ((((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (exitcond_flatten_reg_873 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | ((ap_ST_pp1_stg0_fsm_2 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond_flatten8_reg_902) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)))) begin
        in_stream_strb_V_read = grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_strb_V_read;
    end else begin
        in_stream_strb_V_read = ap_const_logic_0;
    end
end

/// in_stream_user_V_read assign process. ///
always @ (ap_CS_fsm or exitcond_flatten_reg_873 or ap_reg_ppiten_pp0_it1 or exitcond_flatten8_reg_902 or ap_reg_ppiten_pp1_it1 or grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_user_V_read)
begin
    if ((((ap_ST_pp0_stg0_fsm_1 == ap_CS_fsm) & (exitcond_flatten_reg_873 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | ((ap_ST_pp1_stg0_fsm_2 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond_flatten8_reg_902) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)))) begin
        in_stream_user_V_read = grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_user_V_read;
    end else begin
        in_stream_user_V_read = ap_const_logic_0;
    end
end

/// out_address0 assign process. ///
always @ (ap_CS_fsm or ap_reg_ppiten_pp2_it0 or grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_out_r_address0 or tmp_13_fu_846_p1)
begin
    if (((ap_ST_pp2_stg0_fsm_5 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp2_it0))) begin
        out_address0 = tmp_13_fu_846_p1;
    end else if ((ap_ST_st7_fsm_4 == ap_CS_fsm)) begin
        out_address0 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_out_r_address0;
    end else begin
        out_address0 = 'bx;
    end
end

/// out_ce0 assign process. ///
always @ (ap_CS_fsm or ap_reg_ppiten_pp2_it0 or ap_sig_bdd_197 or ap_reg_ppiten_pp2_it1 or grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_out_r_ce0)
begin
    if (((ap_ST_pp2_stg0_fsm_5 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp2_it0) & ~(ap_sig_bdd_197 & (ap_const_logic_1 == ap_reg_ppiten_pp2_it1)))) begin
        out_ce0 = ap_const_logic_1;
    end else if ((ap_ST_st7_fsm_4 == ap_CS_fsm)) begin
        out_ce0 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_out_r_ce0;
    end else begin
        out_ce0 = ap_const_logic_0;
    end
end

/// out_stream_data_V_write assign process. ///
always @ (ap_CS_fsm or exitcond_flatten1_reg_930 or ap_sig_bdd_197 or ap_reg_ppiten_pp2_it1)
begin
    if (((ap_ST_pp2_stg0_fsm_5 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond_flatten1_reg_930) & (ap_const_logic_1 == ap_reg_ppiten_pp2_it1) & ~(ap_sig_bdd_197 & (ap_const_logic_1 == ap_reg_ppiten_pp2_it1)))) begin
        out_stream_data_V_write = ap_const_logic_1;
    end else begin
        out_stream_data_V_write = ap_const_logic_0;
    end
end

/// out_stream_dest_V_write assign process. ///
always @ (ap_CS_fsm or exitcond_flatten1_reg_930 or ap_sig_bdd_197 or ap_reg_ppiten_pp2_it1)
begin
    if (((ap_ST_pp2_stg0_fsm_5 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond_flatten1_reg_930) & (ap_const_logic_1 == ap_reg_ppiten_pp2_it1) & ~(ap_sig_bdd_197 & (ap_const_logic_1 == ap_reg_ppiten_pp2_it1)))) begin
        out_stream_dest_V_write = ap_const_logic_1;
    end else begin
        out_stream_dest_V_write = ap_const_logic_0;
    end
end

/// out_stream_id_V_write assign process. ///
always @ (ap_CS_fsm or exitcond_flatten1_reg_930 or ap_sig_bdd_197 or ap_reg_ppiten_pp2_it1)
begin
    if (((ap_ST_pp2_stg0_fsm_5 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond_flatten1_reg_930) & (ap_const_logic_1 == ap_reg_ppiten_pp2_it1) & ~(ap_sig_bdd_197 & (ap_const_logic_1 == ap_reg_ppiten_pp2_it1)))) begin
        out_stream_id_V_write = ap_const_logic_1;
    end else begin
        out_stream_id_V_write = ap_const_logic_0;
    end
end

/// out_stream_keep_V_write assign process. ///
always @ (ap_CS_fsm or exitcond_flatten1_reg_930 or ap_sig_bdd_197 or ap_reg_ppiten_pp2_it1)
begin
    if (((ap_ST_pp2_stg0_fsm_5 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond_flatten1_reg_930) & (ap_const_logic_1 == ap_reg_ppiten_pp2_it1) & ~(ap_sig_bdd_197 & (ap_const_logic_1 == ap_reg_ppiten_pp2_it1)))) begin
        out_stream_keep_V_write = ap_const_logic_1;
    end else begin
        out_stream_keep_V_write = ap_const_logic_0;
    end
end

/// out_stream_last_V_write assign process. ///
always @ (ap_CS_fsm or exitcond_flatten1_reg_930 or ap_sig_bdd_197 or ap_reg_ppiten_pp2_it1)
begin
    if (((ap_ST_pp2_stg0_fsm_5 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond_flatten1_reg_930) & (ap_const_logic_1 == ap_reg_ppiten_pp2_it1) & ~(ap_sig_bdd_197 & (ap_const_logic_1 == ap_reg_ppiten_pp2_it1)))) begin
        out_stream_last_V_write = ap_const_logic_1;
    end else begin
        out_stream_last_V_write = ap_const_logic_0;
    end
end

/// out_stream_strb_V_write assign process. ///
always @ (ap_CS_fsm or exitcond_flatten1_reg_930 or ap_sig_bdd_197 or ap_reg_ppiten_pp2_it1)
begin
    if (((ap_ST_pp2_stg0_fsm_5 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond_flatten1_reg_930) & (ap_const_logic_1 == ap_reg_ppiten_pp2_it1) & ~(ap_sig_bdd_197 & (ap_const_logic_1 == ap_reg_ppiten_pp2_it1)))) begin
        out_stream_strb_V_write = ap_const_logic_1;
    end else begin
        out_stream_strb_V_write = ap_const_logic_0;
    end
end

/// out_stream_user_V_write assign process. ///
always @ (ap_CS_fsm or exitcond_flatten1_reg_930 or ap_sig_bdd_197 or ap_reg_ppiten_pp2_it1)
begin
    if (((ap_ST_pp2_stg0_fsm_5 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond_flatten1_reg_930) & (ap_const_logic_1 == ap_reg_ppiten_pp2_it1) & ~(ap_sig_bdd_197 & (ap_const_logic_1 == ap_reg_ppiten_pp2_it1)))) begin
        out_stream_user_V_write = ap_const_logic_1;
    end else begin
        out_stream_user_V_write = ap_const_logic_0;
    end
end

/// out_we0 assign process. ///
always @ (ap_CS_fsm or grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_out_r_we0)
begin
    if ((ap_ST_st7_fsm_4 == ap_CS_fsm)) begin
        out_we0 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_out_r_we0;
    end else begin
        out_we0 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or exitcond_flatten_fu_597_p2 or ap_reg_ppiten_pp0_it0 or ap_sig_bdd_126 or ap_reg_ppiten_pp0_it1 or exitcond_flatten8_fu_675_p2 or ap_reg_ppiten_pp1_it0 or ap_sig_bdd_152 or ap_reg_ppiten_pp1_it1 or exitcond_flatten1_fu_762_p2 or ap_reg_ppiten_pp2_it0 or ap_sig_bdd_197 or ap_reg_ppiten_pp2_it1 or grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_ap_done)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_pp0_stg0_fsm_1 : 
        begin
            if (~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_126 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(exitcond_flatten_fu_597_p2 == ap_const_lv1_0))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_126 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(exitcond_flatten_fu_597_p2 == ap_const_lv1_0))) begin
                ap_NS_fsm = ap_ST_pp1_stg0_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end
        end
        ap_ST_pp1_stg0_fsm_2 : 
        begin
            if (~((ap_const_logic_1 == ap_reg_ppiten_pp1_it0) & ~(ap_sig_bdd_152 & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)) & ~(ap_const_lv1_0 == exitcond_flatten8_fu_675_p2))) begin
                ap_NS_fsm = ap_ST_pp1_stg0_fsm_2;
            end else if (((ap_const_logic_1 == ap_reg_ppiten_pp1_it0) & ~(ap_sig_bdd_152 & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)) & ~(ap_const_lv1_0 == exitcond_flatten8_fu_675_p2))) begin
                ap_NS_fsm = ap_ST_st6_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_pp1_stg0_fsm_2;
            end
        end
        ap_ST_st6_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_4;
        end
        ap_ST_st7_fsm_4 : 
        begin
            if (~(ap_const_logic_0 == grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_ap_done)) begin
                ap_NS_fsm = ap_ST_pp2_stg0_fsm_5;
            end else begin
                ap_NS_fsm = ap_ST_st7_fsm_4;
            end
        end
        ap_ST_pp2_stg0_fsm_5 : 
        begin
            if (~((ap_const_logic_1 == ap_reg_ppiten_pp2_it0) & ~(ap_sig_bdd_197 & (ap_const_logic_1 == ap_reg_ppiten_pp2_it1)) & ~(ap_const_lv1_0 == exitcond_flatten1_fu_762_p2))) begin
                ap_NS_fsm = ap_ST_pp2_stg0_fsm_5;
            end else if (((ap_const_logic_1 == ap_reg_ppiten_pp2_it0) & ~(ap_sig_bdd_197 & (ap_const_logic_1 == ap_reg_ppiten_pp2_it1)) & ~(ap_const_lv1_0 == exitcond_flatten1_fu_762_p2))) begin
                ap_NS_fsm = ap_ST_st10_fsm_6;
            end else begin
                ap_NS_fsm = ap_ST_pp2_stg0_fsm_5;
            end
        end
        ap_ST_st10_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_0_1_address1 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_0_address1;
assign a_0_1_d0 = grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_ap_return;
assign a_1_1_address1 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_1_address1;
assign a_1_1_d0 = grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_ap_return;
assign a_2_1_address1 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_2_address1;
assign a_2_1_d0 = grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_ap_return;
assign a_3_1_address1 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_3_address1;
assign a_3_1_d0 = grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_ap_return;
assign a_4_1_address1 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_4_address1;
assign a_4_1_d0 = grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_ap_return;
assign a_5_1_address1 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_5_address1;
assign a_5_1_d0 = grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_ap_return;
assign a_6_1_address1 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_6_address1;
assign a_6_1_d0 = grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_ap_return;
assign a_7_1_address1 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_7_address1;
assign a_7_1_d0 = grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_ap_return;

/// ap_sig_bdd_126 assign process. ///
always @ (exitcond_flatten_reg_873 or grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_data_V_blk_n or grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_keep_V_blk_n or grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_strb_V_blk_n or grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_user_V_blk_n or grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_last_V_blk_n or grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_id_V_blk_n or grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_dest_V_blk_n)
begin
    ap_sig_bdd_126 = (((grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_data_V_blk_n == ap_const_logic_0) | (grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_keep_V_blk_n == ap_const_logic_0) | (grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_strb_V_blk_n == ap_const_logic_0) | (grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_user_V_blk_n == ap_const_logic_0) | (grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_last_V_blk_n == ap_const_logic_0) | (grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_id_V_blk_n == ap_const_logic_0) | (grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_dest_V_blk_n == ap_const_logic_0)) & (exitcond_flatten_reg_873 == ap_const_lv1_0));
end

/// ap_sig_bdd_152 assign process. ///
always @ (grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_data_V_blk_n or grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_keep_V_blk_n or grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_strb_V_blk_n or grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_user_V_blk_n or grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_last_V_blk_n or grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_id_V_blk_n or grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_dest_V_blk_n or exitcond_flatten8_reg_902)
begin
    ap_sig_bdd_152 = (((grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_data_V_blk_n == ap_const_logic_0) | (grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_keep_V_blk_n == ap_const_logic_0) | (grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_strb_V_blk_n == ap_const_logic_0) | (grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_user_V_blk_n == ap_const_logic_0) | (grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_last_V_blk_n == ap_const_logic_0) | (grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_id_V_blk_n == ap_const_logic_0) | (grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_dest_V_blk_n == ap_const_logic_0)) & (ap_const_lv1_0 == exitcond_flatten8_reg_902));
end

/// ap_sig_bdd_197 assign process. ///
always @ (out_stream_data_V_full_n or out_stream_keep_V_full_n or out_stream_strb_V_full_n or out_stream_user_V_full_n or out_stream_last_V_full_n or out_stream_id_V_full_n or out_stream_dest_V_full_n or exitcond_flatten1_reg_930)
begin
    ap_sig_bdd_197 = (((out_stream_data_V_full_n == ap_const_logic_0) & (ap_const_lv1_0 == exitcond_flatten1_reg_930)) | ((ap_const_lv1_0 == exitcond_flatten1_reg_930) & (out_stream_keep_V_full_n == ap_const_logic_0)) | ((ap_const_lv1_0 == exitcond_flatten1_reg_930) & (out_stream_strb_V_full_n == ap_const_logic_0)) | ((ap_const_lv1_0 == exitcond_flatten1_reg_930) & (out_stream_user_V_full_n == ap_const_logic_0)) | ((ap_const_lv1_0 == exitcond_flatten1_reg_930) & (out_stream_last_V_full_n == ap_const_logic_0)) | ((ap_const_lv1_0 == exitcond_flatten1_reg_930) & (out_stream_id_V_full_n == ap_const_logic_0)) | ((ap_const_lv1_0 == exitcond_flatten1_reg_930) & (out_stream_dest_V_full_n == ap_const_logic_0)));
end
assign b_0_1_address1 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_0_address1;
assign b_0_1_d0 = grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_ap_return;
assign b_1_1_address1 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_1_address1;
assign b_1_1_d0 = grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_ap_return;
assign b_2_1_address1 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_2_address1;
assign b_2_1_d0 = grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_ap_return;
assign b_3_1_address1 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_3_address1;
assign b_3_1_d0 = grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_ap_return;
assign b_4_1_address1 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_4_address1;
assign b_4_1_d0 = grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_ap_return;
assign b_5_1_address1 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_5_address1;
assign b_5_1_d0 = grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_ap_return;
assign b_6_1_address1 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_6_address1;
assign b_6_1_d0 = grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_ap_return;
assign b_7_1_address1 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_7_address1;
assign b_7_1_d0 = grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_ap_return;
assign call_ret_mmult_accel_core_push_stream_float_4_5_5_s_fu_590_last = tmp_1_reg_949;
assign call_ret_mmult_accel_core_push_stream_float_4_5_5_s_fu_590_v_read = out_q0;
assign exitcond1_fu_687_p2 = (j2_reg_490 == ap_const_lv5_10? 1'b1: 1'b0);
assign exitcond2_fu_774_p2 = (j5_reg_523 == ap_const_lv5_10? 1'b1: 1'b0);
assign exitcond_flatten1_fu_762_p2 = (indvar_flatten1_reg_501 == ap_const_lv9_100? 1'b1: 1'b0);
assign exitcond_flatten8_fu_675_p2 = (indvar_flatten6_reg_468 == ap_const_lv9_100? 1'b1: 1'b0);
assign exitcond_flatten_fu_597_p2 = (indvar_flatten_reg_435 == ap_const_lv9_100? 1'b1: 1'b0);
assign exitcond_fu_609_p2 = (j_reg_457 == ap_const_lv5_10? 1'b1: 1'b0);
assign grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_0_q0 = a_0_1_q0;
assign grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_0_q1 = a_0_1_q1;
assign grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_1_q0 = a_1_1_q0;
assign grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_1_q1 = a_1_1_q1;
assign grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_2_q0 = a_2_1_q0;
assign grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_2_q1 = a_2_1_q1;
assign grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_3_q0 = a_3_1_q0;
assign grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_3_q1 = a_3_1_q1;
assign grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_4_q0 = a_4_1_q0;
assign grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_4_q1 = a_4_1_q1;
assign grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_5_q0 = a_5_1_q0;
assign grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_5_q1 = a_5_1_q1;
assign grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_6_q0 = a_6_1_q0;
assign grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_6_q1 = a_6_1_q1;
assign grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_7_q0 = a_7_1_q0;
assign grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_a_7_q1 = a_7_1_q1;
assign grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_ap_start = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_ap_start_ap_start_reg;
assign grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_0_q0 = b_0_1_q0;
assign grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_0_q1 = b_0_1_q1;
assign grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_1_q0 = b_1_1_q0;
assign grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_1_q1 = b_1_1_q1;
assign grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_2_q0 = b_2_1_q0;
assign grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_2_q1 = b_2_1_q1;
assign grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_3_q0 = b_3_1_q0;
assign grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_3_q1 = b_3_1_q1;
assign grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_4_q0 = b_4_1_q0;
assign grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_4_q1 = b_4_1_q1;
assign grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_5_q0 = b_5_1_q0;
assign grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_5_q1 = b_5_1_q1;
assign grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_6_q0 = b_6_1_q0;
assign grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_6_q1 = b_6_1_q1;
assign grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_7_q0 = b_7_1_q0;
assign grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_b_7_q1 = b_7_1_q1;
assign grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_ap_start = grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_ap_start_ap_start_reg;
assign grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_data_V_dout = in_stream_data_V_dout;
assign grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_data_V_empty_n = in_stream_data_V_empty_n;
assign grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_dest_V_dout = in_stream_dest_V_dout;
assign grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_dest_V_empty_n = in_stream_dest_V_empty_n;
assign grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_id_V_dout = in_stream_id_V_dout;
assign grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_id_V_empty_n = in_stream_id_V_empty_n;
assign grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_keep_V_dout = in_stream_keep_V_dout;
assign grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_keep_V_empty_n = in_stream_keep_V_empty_n;
assign grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_last_V_dout = in_stream_last_V_dout;
assign grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_last_V_empty_n = in_stream_last_V_empty_n;
assign grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_strb_V_dout = in_stream_strb_V_dout;
assign grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_strb_V_empty_n = in_stream_strb_V_empty_n;
assign grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_user_V_dout = in_stream_user_V_dout;
assign grp_mmult_accel_core_pop_stream_float_4_5_5_s_fu_556_e_user_V_empty_n = in_stream_user_V_empty_n;
assign i1_mid2_fu_707_p3 = ((exitcond1_fu_687_p2)? i_1_fu_701_p2: i1_phi_fu_483_p4);
assign i4_mid2_fu_794_p3 = ((exitcond2_fu_774_p2)? i_2_fu_788_p2: i4_phi_fu_516_p4);
assign i_1_fu_701_p2 = (i1_phi_fu_483_p4 + ap_const_lv5_1);
assign i_2_fu_788_p2 = (i4_phi_fu_516_p4 + ap_const_lv5_1);
assign i_mid2_fu_629_p3 = ((exitcond_fu_609_p2)? i_s_fu_623_p2: i_phi_fu_450_p4);
assign i_s_fu_623_p2 = (i_phi_fu_450_p4 + ap_const_lv5_1);
assign indvar_flatten_next1_fu_768_p2 = (indvar_flatten1_reg_501 + ap_const_lv9_1);
assign indvar_flatten_next7_fu_681_p2 = (indvar_flatten6_reg_468 + ap_const_lv9_1);
assign indvar_flatten_next_fu_603_p2 = (indvar_flatten_reg_435 + ap_const_lv9_1);
assign j2_mid2_fu_693_p3 = ((exitcond1_fu_687_p2)? ap_const_lv5_0: j2_reg_490);
assign j5_cast2_fu_814_p1 = $unsigned(j5_mid2_fu_780_p3);
assign j5_mid2_fu_780_p3 = ((exitcond2_fu_774_p2)? ap_const_lv5_0: j5_reg_523);
assign j_1_fu_651_p2 = (j_mid2_fu_615_p3 + ap_const_lv5_1);
assign j_2_fu_745_p2 = (j2_mid2_fu_693_p3 + ap_const_lv5_1);
assign j_3_fu_857_p2 = (j5_mid2_fu_780_p3 + ap_const_lv5_1);
assign j_mid2_fu_615_p3 = ((exitcond_fu_609_p2)? ap_const_lv5_0: j_reg_457);
assign k_fu_818_p2 = (j5_cast2_fu_814_p1 + tmp_s_fu_806_p3);
assign out_d0 = grp_mmult_accel_core_matrix_multiply_hw_float_16_s_fu_535_out_r_d0;
assign out_stream_data_V_din = call_ret_mmult_accel_core_push_stream_float_4_5_5_s_fu_590_ap_return_0;
assign out_stream_dest_V_din = ap_const_lv5_0;
assign out_stream_id_V_din = ap_const_lv5_0;
assign out_stream_keep_V_din = ap_const_lv4_F;
assign out_stream_last_V_din = call_ret_mmult_accel_core_push_stream_float_4_5_5_s_fu_590_ap_return_1;
assign out_stream_strb_V_din = ap_const_lv4_F;
assign out_stream_user_V_din = ap_const_lv4_0;
assign p_addr3_fu_739_p2 = (p_addr_cast_fu_735_p1 + tmp_3_trn_cast_fu_725_p1);
assign p_addr4_cast_fu_836_p1 = $unsigned(tmp_12_fu_828_p3);
assign p_addr5_fu_840_p2 = (p_addr4_cast_fu_836_p1 + tmp_9_trn_cast_fu_824_p1);
assign p_addr_cast_fu_735_p1 = $unsigned(tmp_9_fu_729_p2);
assign tmp_10_fu_751_p1 = $unsigned(p_addr3_reg_920);
assign tmp_11_fu_802_p1 = i4_mid2_fu_794_p3[3:0];
assign tmp_12_fu_828_p3 = {{i4_mid2_fu_794_p3}, {ap_const_lv4_0}};
assign tmp_13_fu_846_p1 = $unsigned(p_addr5_fu_840_p2);
assign tmp_1_fu_851_p2 = (k_fu_818_p2 == ap_const_lv8_FF? 1'b1: 1'b0);
assign tmp_3_fu_647_p1 = j_mid2_fu_615_p3[0:0];
assign tmp_3_trn_cast_fu_725_p1 = $unsigned(j2_mid2_fu_693_p3);
assign tmp_5_fu_663_p1 = $unsigned(tmp_fu_657_p3);
assign tmp_9_fu_729_p2 = i1_mid2_fu_707_p3 << ap_const_lv5_4;
assign tmp_9_trn_cast_fu_824_p1 = $unsigned(j5_mid2_fu_780_p3);
assign tmp_fu_657_p3 = {{i_mid2_reg_882}, {tmp_3_reg_892}};
assign tmp_s_fu_806_p3 = {{tmp_11_fu_802_p1}, {ap_const_lv4_0}};


endmodule //mmult_accel_core_dut_mmult_accel_core_float_16_256_4_5_5_s

